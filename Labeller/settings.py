"""
Django settings for TweetLabTool project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their v1alues, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import imp
from mongoengine import connect
import sys

ON_OPENSHIFT = False
if os.environ.has_key('OPENSHIFT_REPO_DIR'):
    ON_OPENSHIFT = True

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

default_keys = {'SECRET_KEY': '3g*ug(&#0d=r*wkew16sr%^0qca=rdau*_+6@_y$^j&pgw8a7d' }
use_keys = default_keys
PROJECT_DIR = os.path.dirname(os.path.realpath(__file__))

ADMINS = (
    ('Stefan', 'fensta@gmail.com'),
)

MANAGERS = ADMINS

# Directory in which all tweets are stored that should be added to the
# TODO: remove as it's not needed anymore
TWEET_DIR = "D:/phd/greece/test/mergedTweetData/"
# Names of existing collections/tables that contain the users and tweets
TWEET_COLLECTION = "tweets"
ANNO_COLLECTION = "user"
# Name of the MongoDB collection
DB_NAME = "annotationtool"

if ON_OPENSHIFT:
    DB_NAME = os.environ['OPENSHIFT_APP_NAME']
    # os.environ['OPENSHIFT_DB_*'] variables can be used with databases created
    # with rhc-ctl-app (see /README in this git repo)

    # Since we're using mongoengine, the following setting can be ignored, unless,
    # of course, if you desire to use a relational DB as well!
    # We'll connect to mongod from here itself!
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
            'NAME': os.path.join(os.environ['OPENSHIFT_DATA_DIR'], 'sqlite3.db'),  # Or path to database file if using sqlite3.
            'USER': '',                      # Not used with sqlite3.
            'PASSWORD': '',                  # Not used with sqlite3.
            'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
            'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
        }
    }
    connect(DB_NAME,
            username=os.environ['OPENSHIFT_MONGODB_DB_USERNAME'],
            password=os.environ['OPENSHIFT_MONGODB_DB_PASSWORD'],
            host=os.environ['OPENSHIFT_MONGODB_DB_HOST'],
            port=int(os.environ['OPENSHIFT_MONGODB_DB_PORT']))
else:
    # MongoDB settings
    DB_HOST = "localhost"
    DB_PORT = 27017
    connect(DB_NAME, host=DB_HOST, port=DB_PORT, auto_start_request=False)
SECRET_KEY = use_keys['SECRET_KEY']

# Own variables
# Active learning strategies
AL_STRATEGIES = {
    "US": "Uncertainty Sampling",
    "RS": "Random Sampling",
    "OPAL": "Optimized Probabilistic Learning",
}
# Number of tweets to be annotated per group
ANNOTATOR_GROUPS = {
    "S": 5,
    "M": 10,
    "L": 15,
}
# Number of tweets an annotator has to label within 1 session
TWEETS_PER_SESSION = 5
# If less than TWEET_LIMIT tweets remain for an annotator of group L for
# labeling, he/she is allowed to annotate them whenever he/she wants
TWEET_LIMIT = 5

# How many minutes do annotators have to wait before they're allowed to log
# in again to label the next bulk of tweets?
SESSION_PAUSE = 1

# URL to which unauthenticated users will be redirected to
LOGIN_URL = "/"

# Let MongoDB handle registration, logging and session handling
AUTHENTICATION_BACKENDS = (
    'mongoengine.django.auth.MongoEngineBackend',
)
SESSION_ENGINE = 'mongoengine.django.sessions'
SESSION_SERIALIZER = 'mongoengine.django.sessions.BSONSerializer'
# AUTH_USER_MODEL = 'mongo_auth.MongoUser'
# MONGOENGINE_USER_DOCUMENT = 'mongoengine.django.auth.User'

ERRORS = {
    "InvalidBudget": "User was assigned to an unknown group of annotators. "
                     "Valid values are S, M , L.",
}
# Normal stuff
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Email settings
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'anno.experiment@gmail.com'
EMAIL_HOST_PASSWORD = 'fenstaanno'
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL = 'anno.experiment@gmail.com'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = '3g*ug(&#0d=r*wkew16sr%^0qca=rdau*_+6@_y$^j&pgw8a7d'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

#ALLOWED_HOSTS = []
#if ON_OPENSHIFT:
#     DEBUG = False
#else:
#     DEBUG = True
DEBUG = True
TEMPLATE_DEBUG = DEBUG

if DEBUG:
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # NEVER forget to add this app to make session handling work
    'mongoengine.django.mongo_auth',
    'Labeller',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.security.SecurityMiddleware',
)

LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
        'handlers': {
            'mail_admins': {
                'level': 'ERROR',
                'filters': ['require_debug_false'],
                'class': 'django.utils.log.AdminEmailHandler'
            },
            'console':{
                'level': 'DEBUG',
                'class': 'logging.StreamHandler'
            },
        },
        'loggers': {
            'django.request': {
                'handlers': ['mail_admins'],
                'level': 'ERROR',
                'propagate': True,
                },
            

            }
    }

ROOT_URLCONF = 'TweetLabTool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TweetLabTool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy'
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = "/media/data/Workspaces/OnlineAnnotationTool/Labeller/static"
# STATIC_ROOT = os.path.join(BASE_DIR, "Labeller", "static")
# SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))
# # Find templates in the same folder as settings.py.
# TEMPLATE_DIRS = (
#     os.path.join(SETTINGS_PATH,  'templates'),
# )

